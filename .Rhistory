theme_bw()
)
##############################################################################
#             REGRESSÃO LOGÍSTICA BINÁRIA E PROCEDIMENTO STEPWISE            #
#                 EXEMPLO 02 - CARREGAMENTO DA BASE DE DADOS                 #
##############################################################################
load("challenger.RData")
##############################################################################
#            EXEMPLO 02 - OBSERVAÇÃO DA BASE DE DADOS CHALLENGER             #
##############################################################################
# Visualizando a base de dados challenger
challenger %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 12)
#Estatísticas univariadas descritivas da base de dados
summary(challenger)
#Não há uma variável binária para servir como uma variável dependente, certo?
#Então vamos criá-la considerando a ocorrência de desgastes de peças como a
#ocorrência de um evento que chamaremos de 'falha':
challenger %>%
mutate(falha = ifelse(desgaste > 0,
yes = "sim",
no = "não"),
falha = factor(falha)) -> challenger
#Vamos observar as alterações na base de dados original:
challenger %>%
select(desgaste, falha, everything()) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 12)
# Estimando o modelo logístico binário
modelo_challenger <- glm(formula = falha ~ . -desgaste -t,
data = challenger,
family = "binomial")
# Parâmetros do modelo_default
summary(modelo_challenger)
# Uma solução rápida para o caso pode ser a utilização da função summ do pacote jtools
summ(model = modelo_challenger, confint = T, digits = 4, ci.width = 0.95)
export_summs(modelo_challenger, scale = F, digits = 4)
# Procedimento Stepwise
step_challenger <- step(object = modelo_challenger,
k = qchisq(p = 0.05, df = 1, lower.tail = FALSE))
# Parâmetros do modelo step_challenger
summ(model = step_challenger, confint = T, digits = 4, ci.width = 0.95)
# Fazendo predições para o modelo step_challenger:
# Exemplo 1: qual a probabilidade média de falha a 70ºF (~21ºC)?
predict(object = step_challenger,
data.frame(temperatura = 70),
type = "response")
# Exemplo 2: qual a probabilidade média de falha a 77ºF (25ºC)?
predict(object = step_challenger,
data.frame(temperatura = 77),
type = "response")
# Exemplo 3: qual a probabilidade média de falha a 34ºF (~1ºC) - manhã do lançamento?
predict(object = step_challenger,
data.frame(temperatura = 34),
type = "response")
# Construção da sigmoide - probabilidade de evento em função da variável 'temperatura'
ggplotly(
challenger %>%
mutate(phat = predict(object = step_challenger,
newdata = challenger,
type = "response"),
falha = as.numeric(falha) - 1) %>%
ggplot() +
geom_point(aes(x = temperatura, y = falha), color = "#95D840FF", size = 2) +
geom_smooth(aes(x = temperatura, y = phat),
method = "glm", formula = y ~ x,
method.args = list(family = "binomial"),
se = F,
color = "#440154FF", size = 2) +
labs(x = "Temperatura",
y = "Falha") +
theme_bw()
)
modelo_challenger
# Procedimento Stepwise
step_challenger <- step(object = modelo_challenger,
k = qchisq(p = 0.05, df = 1, lower.tail = FALSE))
# Parâmetros do modelo step_challenger
summ(model = step_challenger, confint = T, digits = 4, ci.width = 0.95)
# Fazendo predições para o modelo step_challenger:
# Exemplo 1: qual a probabilidade média de falha a 70ºF (~21ºC)?
predict(object = step_challenger,
data.frame(temperatura = 70),
type = "response")
# Exemplo 2: qual a probabilidade média de falha a 77ºF (25ºC)?
predict(object = step_challenger,
data.frame(temperatura = 77),
type = "response")
# Exemplo 3: qual a probabilidade média de falha a 34ºF (~1ºC) - manhã do lançamento?
predict(object = step_challenger,
data.frame(temperatura = 34),
type = "response")
# Construção da sigmoide - probabilidade de evento em função da variável 'temperatura'
ggplotly(
challenger %>%
mutate(phat = predict(object = step_challenger,
newdata = challenger,
type = "response"),
falha = as.numeric(falha) - 1) %>%
ggplot() +
geom_point(aes(x = temperatura, y = falha), color = "#95D840FF", size = 2) +
geom_smooth(aes(x = temperatura, y = phat),
method = "glm", formula = y ~ x,
method.args = list(family = "binomial"),
se = F,
color = "#440154FF", size = 2) +
labs(x = "Temperatura",
y = "Falha") +
theme_bw()
)
#Nossa homenagem aos astronautas
image_scale(image_read("https://img.ibxk.com.br///2016/01/29/29182307148581.jpg?w=1200&h=675&mode=crop&scale=both"),
"x320")
##############################################################################
#   REGRESSÃO LOGÍSTICA BINÁRIA COM VARIÁVEIS EXPLICATIVAS QUANTI E QUALIS   #
#                 EXEMPLO 03 - CARREGAMENTO DA BASE DE DADOS                 #
##############################################################################
load("dados_fidelidade.RData")
##############################################################################
#        EXEMPLO 03 - OBSERVAÇÃO DA BASE DE DADOS DADOS_FIDELIDADE           #
##############################################################################
#Visualizando a base de dados dados_fidelidade
dados_fidelidade %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 12)
dados_fidelidade
#Tabela de frequências absolutas das variáveis qualitativas referentes aos
#atributos da loja na percepção dos consumidores
table(dados_fidelidade$atendimento)
table(dados_fidelidade$sortimento)
table(dados_fidelidade$acessibilidade)
table(dados_fidelidade$preço)
glimpse(dados_fidelidade)
##############################################################################
#             EXEMPLO 03 - ESTIMAÇÃO DE UM MODELO LOGÍSTICO BINÁRIO          #
##############################################################################
modelo_fidelidade <- glm(formula = fidelidade ~ . - id,
data = dados_fidelidade,
family = "binomial")
#Parâmetros do modelo_fidelidade
summary(modelo_fidelidade)
#Outro modo de apresentar os outputs do modelo_fidelidade
summ(modelo_fidelidade, confint = T, digits = 3, ci.width = .95)
export_summs(modelo_fidelidade, scale = F, digits = 6)
#Procedimento Stepwise
step_fidelidade <- step(object = modelo_fidelidade,
k = qchisq(p = 0.05, df = 1, lower.tail = FALSE))
##############################################################################
#                       REGRESSÃO LOGÍSTICA MULTINOMIAL                      #
#                 EXEMPLO 04 - CARREGAMENTO DA BASE DE DADOS                 #
##############################################################################
load(file = "AtrasadoMultinomial.RData")
##############################################################################
#        EXEMPLO 04 - OBSERVAÇÃO DA BASE DE DADOS AtrasadoMultinomial        #
##############################################################################
# Visualizando a base de dados AtrasadoMultinomial
AtrasadoMultinomial %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 12)
# Estatísticas descritivas univariadas da base de dados
summary(AtrasadoMultinomial)
##############################################################################
#           EXEMPLO 04 - ESTIMAÇÃO DE UM MODELO LOGÍSTICO MULTINOMIAL        #
##############################################################################
#Apontando a categoria de referência
AtrasadoMultinomial$atrasado <- relevel(AtrasadoMultinomial$atrasado,
ref = "não chegou atrasado")
#Estimação do modelo - função multinom do pacote nnet
modelo_atrasado <- multinom(formula = atrasado ~ dist + sem,
data = AtrasadoMultinomial)
#Parâmetros do modelo_atrasado
summary(modelo_atrasado)
#LL do modelo_atrasado
logLik(modelo_atrasado)
# --
## diretório de trabalho
setwd("C:/Users/Renato/OneDrive/github/_tcc/3_regressao")
#--
## carregando dados
dta = read.excel("_dta/kmeans_cluster.xslx")
#--
## carregando dados
kmeans <- as.data.frame(read_excel("_dta/kmeans_cluster.xslx"))
# --
# Pacotes utilizados
pacotes <- c("plotly",
"tidyverse",
"knitr",
"kableExtra",
"fastDummies",
"rgl",
"car",
"reshape2",
"jtools",
"lmtest",
"caret",
"pROC",
"ROCR",
"nnet",
"magick",
"cowplot",
"readxl")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
# --
## diretório de trabalho
setwd("C:/Users/Renato/OneDrive/github/_tcc/3_regressao")
#--
## carregando dados
kmeans <- as.data.frame(read_excel("_dta/kmeans_cluster.xslx"))
#--
## carregando dados
kmeans <- as.data.frame(read_excel("_dta/kmeans_cluster.xlsx"))
kmeans
#  --
# Visualizando a base de dados kmeans
kmeans %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 12)
# Estatísticas descritivas univariadas da base de dados
summary(kmeans)
# Estimação do modelo - função multinom do pacote nnet
modelo_kmeans <- multinom(formula = complete_hierarquico ~ Fator1 + Fator2,
data = kmeans)
# Parâmetros do modelo_kmeans
summary(modelo_kmeans)
# LL do modelo_kmeans
logLik(modelo_kmeans)
# A função summ do pacote jtools não funciona para objetos de classe 'multinom'.
# Logo, vamos definir uma função Qui2 para se extrair a estatística geral do
# modelo:
Qui2 <- function(x) {
maximo <- logLik(x)
minimo <- logLik(update(x, ~1, trace = F))
Qui.Quadrado <- -2*(minimo - maximo)
pvalue <- pchisq(Qui.Quadrado, df = 1, lower.tail = F)
df <- data.frame()
df <- cbind.data.frame(Qui.Quadrado, pvalue)
return(df)
}
# Estatística geral do modelo_kmeans
Qui2(modelo_kmeans)
summary(modelo_kmeans)$coefficients
summary(modelo_kmeans)$standard.errors
zWald_modelo_kmeans <- (summary(modelo_kmeans)$coefficients /
summary(modelo_kmeans)$standard.errors)
zWald_modelo_kmeans
# Porém, ainda faltam os respectivos p-values. Assim, os valores das probabilidades
# associadas às abscissas de uma distribuição normal-padrão é dada pela função
# pnorm(), considerando os valores em módulo - abs(). Após isso, multiplicamos
# por dois os valores obtidos para considerar os dois lados da distribuição
# normal padronizada (distribuição bicaudal). Desta forma, temos que:
round((pnorm(abs(zWald_modelo_kmeans), lower.tail = F) * 2), 4)
# Fazendo predições para o modelo_atrasado Exemplo: qual a probabilidade média
# de atraso para cada categoria da variável dependente, se o indivíduo tiver
# que percorrer 22km e passar por 12 semáforos.
predict(modelo_kmeans,
data.frame(dist = 22, sem = 12),
type = "probs")
#Eficiência global do modelo
acuracia <- (round((sum(diag(table(complete_hierarquico, predicao))) /
sum(table(complete_hierarquico, predicao))), 2))
#Adicionando à base de dados as probabilidades em razão de cada categoria:
levels(kmeans$complete_hierarquico)
kmeans$complete_hierarquico
levels(kmeans$complete_hierarquico)
kmeans[c(1,2,3)] <- modelo_kmeans$fitted.values
View(kmeans)
# Adicionando os valores previstos de probabilidade da base de dados
kmeans$phat <- modelo_kmeans$fitted.values
kmeans
Atrasado
# Visualizando a base de dados com a variável 'phat'
kmeans %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 12)
# Matriz de confusão para cutoff = 0.5 (função confusionMatrix do pacote caret)
confusionMatrix(table(predict(modelo_kmeans, type = "response") >= 0.5,
kmeans$complete_hierarquico == 1)[2:1, 2:1])
predict(modelo_kmeans, type = "response")
# Matriz de confusão para cutoff = 0.5 (função confusionMatrix do pacote caret)
confusionMatrix(table(predict(modelo_kmeans, type = "response") >= 0.5,
kmeans$complete_hierarquico == 1)[2:1, 2:1])
# Matriz de confusão para cutoff = 0.3
confusionMatrix(table(predict(modelo_kmeans, type = "response") >= 0.3,
kmeans$complete_hierarquico == 1)[2:1, 2:1])
# função prediction do pacote ROCR
predicoes <- prediction(predictions = modelo_kmeans$fitted.values,
labels = kmeans$complete_hierarquico)
kmeans$complete_hierarquico
modelo_kmeans$fitted.values
prediction(predictions = modelo_kmeans$fitted.values,
labels = kmeans$complete_hierarquico)
# --
# Pacotes utilizados
pacotes <- c("plotly",
"tidyverse",
"knitr",
"kableExtra",
"fastDummies",
"rgl",
"car",
"reshape2",
"jtools",
"lmtest",
"caret",
"pROC",
"ROCR",
"nnet",
"magick",
"cowplot",
"readxl")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
# Matriz de confusão para cutoff = 0.5 (função confusionMatrix do pacote caret)
confusionMatrix(table(predict(modelo_kmeans, type = "response") >= 0.5,
kmeans$complete_hierarquico == 1)[2:1, 2:1])
modelo_kmeans$Final
#--
## carregando dados
kmeans_cluster <- as.data.frame(read_excel("_dta/kmeans_cluster.xlsx"))
#  --
# Visualizando a base de dados kmeans_cluster
kmeans_cluster %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 12)
# Estatísticas descritivas univariadas da base de dados
summary(kmeans_cluster)
glimpse(kmeans_cluster)
factor(kmeans_cluster)
# Parâmetros do modelo_kmeans
summary(modelo_kmeans)
modelo_kmeans <- glm(formula = complete_hierarquico ~ Fator1 + Fator2,
data = kmeans_cluster,
family = "multinomial")
modelo_kmeans <- glm(formula = complete_hierarquico ~ Fator1 + Fator2,
data = kmeans_cluster,
family = "binomial")
kmeans_cluster$complete_hierarquico <- factor(kmeans_cluster$complete_hierarquico)
# --
# Estatísticas descritivas univariadas da base de dados
summary(kmeans_cluster)
glimpse(kmeans_cluster)
kmeans_cluster$complete_hierarquico
# --
# Apontando a categoria de referência
#Apontando a categoria de referência
kmeans_cluster$complete_hierarquico <- relevel(kmeans_cluster$complete_hierarquico,
ref = 1)
# --
# Estimação do modelo - função multinom do pacote nnet
modelo_kmeans <- multinom(formula = complete_hierarquico ~ Fator1 + Fator2,
data = kmeans_cluster)
# Parâmetros do modelo_kmeans
summary(modelo_kmeans)
# Parâmetros do modelo_kmeans
summary(modelo_kmeans)
# --# LL do modelo_kmeans
logLik(modelo_kmeans)
# --
# A função summ do pacote jtools não funciona para objetos de classe 'multinom'.
# Logo, vamos definir uma função Qui2 para se extrair a estatística geral do
# modelo:
Qui2 <- function(x) {
maximo <- logLik(x)
minimo <- logLik(update(x, ~1, trace = F))
Qui.Quadrado <- -2*(minimo - maximo)
pvalue <- pchisq(Qui.Quadrado, df = 1, lower.tail = F)
df <- data.frame()
df <- cbind.data.frame(Qui.Quadrado, pvalue)
return(df)
}
# --
# Estatística geral do modelo_kmeans
Qui2(modelo_kmeans)
# --
# Pacotes utilizados
pacotes <- c("plotly",
"tidyverse",
"knitr",
"kableExtra",
"fastDummies",
"rgl",
"car",
"reshape2",
"jtools",
"lmtest",
"caret",
"pROC",
"ROCR",
"nnet",
"magick",
"cowplot",
"readxl")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
# --
## diretório de trabalho
setwd("C:/Users/Renato/OneDrive/github/_tcc/3_regressao")
#--
## carregando dados
kmeans_cluster <- as.data.frame(read_excel("_dta/kmeans_cluster.xlsx"))
# --
## diretório de trabalho
setwd("C:/Users/Renato/OneDrive/github/_tcc/3_multinomial")
#--
## carregando dados
kmeans_cluster <- as.data.frame(read_excel("_dta/kmeans_cluster.xlsx"))
View(kmeans_cluster)
#  --
# Visualizando a base de dados kmeans_cluster
kmeans_cluster %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 12)
#  --
# transformando y em quali
kmeans_cluster$complete_hierarquico <- factor(kmeans_cluster$complete_hierarquico)
# --
# Estatísticas descritivas univariadas da base de dados
summary(kmeans_cluster)
glimpse(kmeans_cluster)
# --
# Apontando a categoria de referência
kmeans_cluster$complete_hierarquico <- relevel(kmeans_cluster$complete_hierarquico,
ref = 1)
# --
# Estimação do modelo - função multinom do pacote nnet
modelo_kmeans <- multinom(formula = complete_hierarquico ~ Fator1 + Fator2,
data = kmeans_cluster)
# Parâmetros do modelo_kmeans
summary(modelo_kmeans)
# --# LL do modelo_kmeans
logLik(modelo_kmeans)
# --
# A função summ do pacote jtools não funciona para objetos de classe 'multinom'.
# Logo, vamos definir uma função Qui2 para se extrair a estatística geral do
# modelo:
Qui2 <- function(x) {
maximo <- logLik(x)
minimo <- logLik(update(x, ~1, trace = F))
Qui.Quadrado <- -2*(minimo - maximo)
pvalue <- pchisq(Qui.Quadrado, df = 1, lower.tail = F)
df <- data.frame()
df <- cbind.data.frame(Qui.Quadrado, pvalue)
return(df)
}
# --
# Estatística geral do modelo_kmeans
Qui2(modelo_kmeans)
zWald_modelo_kmeans <- (summary(modelo_kmeans)$coefficients /
summary(modelo_kmeans)$standard.errors)
zWald_modelo_kmeans
qnorm(0.025, lower.tail = F)
# --
# Porém, ainda faltam os respectivos p-values. Assim, os valores das probabilidades
# associadas às abscissas de uma distribuição normal-padrão é dada pela função
# pnorm(), considerando os valores em módulo - abs(). Após isso, multiplicamos
# por dois os valores obtidos para considerar os dois lados da distribuição
# normal padronizada (distribuição bicaudal). Desta forma, temos que:
round((pnorm(abs(zWald_modelo_kmeans), lower.tail = F) * 2), 4)
# --
# A EFETIVIDADE GERAL DO MODELO
# Adicionando as prováveis ocorrências de evento apontadas pela modelagem à
# base de dados
AtrasadoMultinomial$predicao <- predict(modelo_atrasado,
newdata = AtrasadoMultinomial,
type = "class")
# --
# A EFETIVIDADE GERAL DO MODELO
# Adicionando as prováveis ocorrências de evento apontadas pela modelagem à
# base de dados
AtrasadoMultinomial$predicao <- predict(modelo_kmeans,
newdata = AtrasadoMultinomial,
type = "class")
