instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
##############################################################################
#   REGRESSÃO LOGÍSTICA BINÁRIA COM VARIÁVEIS EXPLICATIVAS QUANTI E QUALIS   #
#                 EXEMPLO 03 - CARREGAMENTO DA BASE DE DADOS                 #
##############################################################################
load("dados_fidelidade.RData")
##############################################################################
#        EXEMPLO 03 - OBSERVAÇÃO DA BASE DE DADOS DADOS_FIDELIDADE           #
##############################################################################
#Visualizando a base de dados dados_fidelidade
dados_fidelidade %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 12)
#Estatísticas Univariadas da Base de Dados
summary(dados_fidelidade)
##############################################################################
#             EXEMPLO 03 - ESTIMAÇÃO DE UM MODELO LOGÍSTICO BINÁRIO          #
##############################################################################
modelo_fidelidade <- glm(formula = fidelidade ~ . - id,
data = dados_fidelidade,
family = "binomial")
#Parâmetros do modelo_fidelidade
summary(modelo_fidelidade)
#Procedimento Stepwise
step_fidelidade <- step(object = modelo_fidelidade,
k = qchisq(p = 0.05, df = 1, lower.tail = FALSE))
##############################################################################
#                    EXEMPLO 03 -  PROCEDIMENTO N-1 DUMMIES                  #
##############################################################################
#Dummizando as variáveis atendimento, sortimento, acessibilidade e preço. O
#código abaixo, automaticamente, fará: a) a dummização das variáveis originais;
#b)removerá as variáveis dummizadas originais; c) estabelecerá como categorias
#de referência as categorias de label 1 de cada variável original.
fidelidade_dummies <- dummy_columns(.data = dados_fidelidade,
select_columns = c("atendimento",
"sortimento",
"acessibilidade",
"preço"),
remove_selected_columns = T,
remove_first_dummy = T)
modelo_fidelidade_dummies <- glm(formula = fidelidade ~ . -id,
data = fidelidade_dummies,
family = "binomial")
#Parâmetros do modelo_fidelidade_dummies
summary(modelo_fidelidade_dummies)
#Valor do LL do modelo_fidelidade_dummies
logLik(modelo_fidelidade_dummies)
#Procedimento Stepwise
step_fidelidade_dummies <- step(object = modelo_fidelidade_dummies,
k = qchisq(p = 0.05, df = 1, lower.tail = FALSE))
#Valor do LL do modelo step_fidelidade_dummies
logLik(step_fidelidade_dummies)
##############################################################################
#              EXEMPLO 03 - CONSTRUÇÃO DE UMA MATRIZ DE CONFUSÃO             #
##############################################################################
confusionMatrix(
table(predict(step_fidelidade_dummies, type = "response") >= 0.5,
dados_fidelidade$fidelidade == "sim")[2:1, 2:1]
)
#função prediction do pacote ROCR
predicoes <- prediction(predictions = step_fidelidade_dummies$fitted.values,
labels = dados_fidelidade$fidelidade)
#função performance do pacote ROCR
dados_curva_roc <- performance(predicoes, measure = "sens")
#Porém, desejamos os dados da sensitividade, então devemos fazer o seguinte
#ajuste:
sensitividade <- dados_curva_roc@y.values[[1]]
especificidade <- performance(predicoes, measure = "spec")
#extraindo os dados da especificidade, mas também há que se fazer um ajuste para a
#plotagem:
especificidade <- especificidade@y.values[[1]]
cutoffs <- dados_curva_roc@x.values[[1]]
dados_plotagem <- cbind.data.frame(cutoffs, especificidade, sensitividade)
#Visualizando o novo data frame dados_plotagem
dados_plotagem %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 22)
#Visualizando o novo data frame dados_plotagem
dados_plotagem %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 12)
#Plotando:
ggplotly(dados_plotagem %>%
ggplot(aes(x = cutoffs, y = especificidade)) +
geom_line(aes(color = "Especificidade"),
size = 1) +
geom_point(color = "#95D840FF",
size = 1.9) +
geom_line(aes(x = cutoffs, y = sensitividade, color = "Sensitividade"),
size = 1) +
geom_point(aes(x = cutoffs, y = sensitividade),
color = "#440154FF",
size = 1.9) +
labs(x = "Cutoff",
y = "Sensitividade/Especificidade") +
scale_color_manual("Legenda:",
values = c("#95D840FF", "#440154FF")) +
theme_bw())
##############################################################################
#                     EXEMPLO 03 - CONSTRUÇÃO DA CURVA ROC                   #
##############################################################################
ROC <- roc(response = dados_fidelidade$fidelidade,
predictor = step_fidelidade_dummies$fitted.values)
ggplotly(
ggroc(ROC, color = "#440154FF", size = 1) +
geom_segment(aes(x = 1, xend = 0, y = 0, yend = 1),
color="grey40",
size = 0.2) +
labs(x = "Especificidade",
y = "Sensitividade",
title = paste("Área abaixo da curva:",
round(ROC$auc, 3),
"|",
"Coeficiente de Gini",
round((ROC$auc[1] - 0.5) / 0.5, 3))) +
theme_bw()
)
##############################################################################
#                       REGRESSÃO LOGÍSTICA MULTINOMIAL                      #
#                 EXEMPLO 04 - CARREGAMENTO DA BASE DE DADOS                 #
##############################################################################
load(file = "AtrasadoMultinomial.RData")
##############################################################################
#        EXEMPLO 04 - OBSERVAÇÃO DA BASE DE DADOS AtrasadoMultinomial        #
##############################################################################
#Visualizando a base de dados AtrasadoMultinomial
AtrasadoMultinomial %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 22)
##############################################################################
#        EXEMPLO 04 - OBSERVAÇÃO DA BASE DE DADOS AtrasadoMultinomial        #
##############################################################################
#Visualizando a base de dados AtrasadoMultinomial
AtrasadoMultinomial %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 12)
##############################################################################
#                       REGRESSÃO LOGÍSTICA MULTINOMIAL                      #
#                 EXEMPLO 04 - CARREGAMENTO DA BASE DE DADOS                 #
##############################################################################
load(file = "AtrasadoMultinomial.RData")
##############################################################################
#        EXEMPLO 04 - OBSERVAÇÃO DA BASE DE DADOS AtrasadoMultinomial        #
##############################################################################
#Visualizando a base de dados AtrasadoMultinomial
AtrasadoMultinomial %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 12)
#Estatísticas descritivas univariadas da base de dados
summary(AtrasadoMultinomial)
##############################################################################
#           EXEMPLO 04 - ESTIMAÇÃO DE UM MODELO LOGÍSTICO MULTINOMIAL        #
##############################################################################
#Apontando a categoria de referência
AtrasadoMultinomial$atrasado <- relevel(AtrasadoMultinomial$atrasado,
ref = "não chegou atrasado")
View(AtrasadoMultinomial)
#Estimação do modelo - função multinom do pacote nnet
modelo_atrasado <- multinom(formula = atrasado ~ dist + sem,
data = AtrasadoMultinomial)
#Parâmetros do modelo_atrasado
summary(modelo_atrasado)
#LL do modelo_atrasado
logLik(modelo_atrasado)
#A função summ do pacote jtools não funciona para objetos de classe 'multinom'. Logo,
#vamos definir uma função Qui2 para se extrair a estatística geral do modelo:
Qui2 <- function(x) {
maximo <- logLik(x)
minimo <- logLik(update(x, ~1, trace = F))
Qui.Quadrado <- -2*(minimo - maximo)
pvalue <- pchisq(Qui.Quadrado, df = 1, lower.tail = F)
df <- data.frame()
df <- cbind.data.frame(Qui.Quadrado, pvalue)
return(df)
}
View(Qui2)
View(Qui2)
Qui.Quadrado <- -2*(minimo - maximo)
zWald_modelo_atrasado <- (summary(modelo_atrasado)$coefficients /
summary(modelo_atrasado)$standard.errors)
zWald_modelo_atrasado
#Porém, ainda faltam os respectivos p-values. Assim, os valores das probabilidades
#associadas às abscissas de uma distribuição normal-padrão é dada pela função
#pnorm(), considerando os valores em módulo - abs(). Após isso, multiplicamos
#por dois os valores obtidos para considerar os dois lados da distribuição
#normal padronizada (distribuição bicaudal). Desta forma, temos que:
round((pnorm(abs(zWald_modelo_atrasado), lower.tail = F) * 2), 4)
#Fazendo predições para o modelo_atrasado Exemplo: qual a probabilidade média
#de atraso para cada categoria da variável dependente, se o indivíduo tiver
#que percorrer 22km e passar por 12 semáforos.
predict(modelo_atrasado,
data.frame(dist = 22, sem = 12),
type = "probs")
predict(modelo_atrasado,
data.frame(dist = 22, sem = 12),
type = "class")
#Fazendo predições para o modelo_atrasado Exemplo: qual a probabilidade média
#de atraso para cada categoria da variável dependente, se o indivíduo tiver
#que percorrer 22km e passar por 12 semáforos.
predict(modelo_atrasado,
data.frame(dist = 22, sem = 14),
type = "probs")
predict(modelo_atrasado,
data.frame(dist = 22, sem = 14),
type = "class")
#Fazendo predições para o modelo_atrasado Exemplo: qual a probabilidade média
#de atraso para cada categoria da variável dependente, se o indivíduo tiver
#que percorrer 22km e passar por 12 semáforos.
predict(modelo_atrasado,
data.frame(dist = 22, sem = 12),
type = "probs")
predict(modelo_atrasado,
data.frame(dist = 22, sem = 12),
type = "class")
##############################################################################
#                   EXEMPLO 04 - A EFETIVIDADE GERAL DO MODELO               #
##############################################################################
#Adicionando as prováveis ocorrências de evento apontadas pela modelagem à
#base de dados
AtrasadoMultinomial$predicao <- predict(modelo_atrasado,
newdata = AtrasadoMultinomial,
type = "class")
#Visualizando a nova base de dados AtrasadoMultinomial com a variável 'predicao'
AtrasadoMultinomial %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 22)
#Visualizando a nova base de dados AtrasadoMultinomial com a variável 'predicao'
AtrasadoMultinomial %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 12)
attach(AtrasadoMultinomial)
#Criando uma tabela para comparar as ocorrências reais com as predições
EGM <- as.data.frame.matrix(table(atrasado, predicao))
#Visualizando a tabela EGM
EGM %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 22)
#Visualizando a tabela EGM
EGM %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 12)
#Eficiência global do modelo
acuracia <- (round((sum(diag(table(atrasado, predicao))) /
sum(table(atrasado, predicao))), 2))
acuracia
#Adicionando à base de dados as probabilidades em razão de cada categoria:
levels(AtrasadoMultinomial$atrasado)
AtrasadoMultinomial[c("não chegou atrasado",
"chegou atrasado à primeira aula",
"chegou atrasado à segunda aula")] <- modelo_atrasado$fitted.values
#Plotagem das smooth probability lines para a variável 'dist'
ggplotly(
AtrasadoMultinomial %>%
dplyr::select(-predicao, - estudante) %>%
rename(y = 1) %>%
melt(id.vars = c("y","dist","sem"),
value.name = "probabilidades") %>%
rename(categorias = variable) %>%
mutate(categorias = factor(categorias,
levels = c("não chegou atrasado",
"chegou atrasado à primeira aula",
"chegou atrasado à segunda aula"))) %>%
ggplot() +
geom_smooth(aes(x = dist, y = probabilidades, color = categorias),
method = "loess", formula = y ~ x, se = T) +
labs(x = "Distância Percorrida",
y = "Probabilidades",
color = "Legenda:") +
scale_color_viridis_d() +
theme_bw()
)
#Plotagem das smooth probability lines para a variável 'sem'
ggplotly(
AtrasadoMultinomial %>%
dplyr::select(-predicao, - estudante) %>%
rename(y = 1) %>%
melt(id.vars = c("y","dist","sem"),
value.name = "probabilidades") %>%
rename(categorias = variable) %>%
mutate(categorias = factor(categorias,
levels = c("não chegou atrasado",
"chegou atrasado à primeira aula",
"chegou atrasado à segunda aula"))) %>%
ggplot() +
geom_smooth(aes(x = sem, y = probabilidades, color = categorias),
method = "loess", formula = y ~ x, se = T) +
labs(x = "Semáforos no Percurso",
y = "Probabilidades",
color = "Legenda:") +
scale_color_viridis_d() +
theme_bw()
)
AtrasadoMultinomial$p0 <- AtrasadoMultinomial$`não chegou atrasado`
AtrasadoMultinomial$p1 <- AtrasadoMultinomial$`chegou atrasado à primeira aula`
AtrasadoMultinomial$p2 <- AtrasadoMultinomial$`chegou atrasado à segunda aula`
#p0 - Probabilidades de não chegar atrasado (função scatter3d do pacote car):
scatter3d(AtrasadoMultinomial$dist,AtrasadoMultinomial$p0,
AtrasadoMultinomial$sem,
groups = AtrasadoMultinomial$atrasado,
data = AtrasadoMultinomial,
fit = "smooth")
pacotes <- c("plotly","tidyverse","knitr","kableExtra","fastDummies","rgl","car",
"reshape2","jtools","lmtest","caret","pROC","ROCR","nnet","magick",
"cowplot")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
summary(cars)
plot(pressure)
prob <- function(z){
prob = 1 / (1 + exp(-z))
}
```{r prob}
prob = 1 / (1 + exp(-z))
prob = 1 / (1 + exp(-z))
pacotes <- c("plotly","tidyverse","knitr","kableExtra","fastDummies","rgl","car",
"reshape2","jtools","lmtest","caret","pROC","ROCR","nnet","magick",
"cowplot")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
prob <- function(z){
prob = 1 / (1 + exp(-z))
}
data.frame(z = -5:5) %>%
ggplot() +
stat_function(aes(x = z, color = "Prob. Evento"),
fun = prob,
size = 2) +
geom_hline(yintercept = 0.5, linetype = "dotted") +
scale_color_manual("Legenda:",
values = "#440154FF") +
labs(x = "Logito z",
y = "Probabilidade") +
theme_bw()
load(file = "Atrasado.RData")
#Visualizando a base de dados
Atrasado %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 12)
summary(Atrasado)
table(Atrasado$atrasado)
modelo_atrasos <- glm(formula = atrasado ~ dist + sem,
data = Atrasado,
family = "binomial")
summary(modelo_atrasos)
logLik(modelo_atrasos)
predict(object = modelo_atrasos,
data.frame(dist = 7, sem = 10),
type = "response")
Atrasado$phat <- modelo_atrasos$fitted.values
Atrasado %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 12)
confusionMatrix(table(predict(modelo_atrasos, type = "response") >= 0.5,
Atrasado$atrasado == 1)[2:1, 2:1])
data.frame(Sensitividade = confusionMatrix(table(predict(modelo_atrasos,
type = "response") >= 0.5,
Atrasado$atrasado == 1)[2:1, 2:1])[["byClass"]][["Sensitivity"]],
Especificidade = confusionMatrix(table(predict(modelo_atrasos,
type = "response") >= 0.5,
Atrasado$atrasado == 1)[2:1, 2:1])[["byClass"]][["Specificity"]],
Acurácia = confusionMatrix(table(predict(modelo_atrasos,
type = "response") >= 0.5,
Atrasado$atrasado == 1)[2:1, 2:1])[["overall"]][["Accuracy"]]) %>%
kable() %>%
kable_styling(bootstrap_options = "striped", position = "center",
full_width = F,
font_size = 12)
confusionMatrix(table(predict(modelo_atrasos, type = "response") >= 0.3,
Atrasado$atrasado == 1)[2:1, 2:1])
confusionMatrix(table(predict(modelo_atrasos, type = "response") >= 0.7,
Atrasado$atrasado == 1)[2:1, 2:1])
predicoes <- prediction(predictions = modelo_atrasos$fitted.values,
labels = Atrasado$atrasado)
dados_curva_roc <- performance(predicoes, measure = "sens")
sensitividade <- (performance(predicoes, measure = "sens"))@y.values[[1]]
especificidade <- (performance(predicoes, measure = "spec"))@y.values[[1]]
cutoffs <- dados_curva_roc@x.values[[1]]
dados_plotagem <- cbind.data.frame(cutoffs, especificidade, sensitividade)
dados_plotagem %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 12)
ggplotly(dados_plotagem %>%
ggplot(aes(x = cutoffs, y = especificidade)) +
geom_line(aes(color = "Especificidade"),
size = 1) +
geom_point(color = "#95D840FF",
size = 1.9) +
geom_line(aes(x = cutoffs, y = sensitividade, color = "Sensitividade"),
size = 1) +
geom_point(aes(x = cutoffs, y = sensitividade),
color = "#440154FF",
size = 1.9) +
labs(x = "Cutoff",
y = "Sensitividade/Especificidade") +
scale_color_manual("Legenda:",
values = c("#95D840FF", "#440154FF")) +
theme_bw())
ROC <- roc(response = Atrasado$atrasado,
predictor = modelo_atrasos$fitted.values)
ggplotly(dados_plotagem %>%
ggplot(aes(x = cutoffs, y = especificidade)) +
geom_line(aes(color = "Especificidade"),
size = 1) +
geom_point(color = "#95D840FF",
size = 1.9) +
geom_line(aes(x = cutoffs, y = sensitividade, color = "Sensitividade"),
size = 1) +
geom_point(aes(x = cutoffs, y = sensitividade),
color = "#440154FF",
size = 1.9) +
labs(x = "Cutoff",
y = "Sensitividade/Especificidade") +
scale_color_manual("Legenda:",
values = c("#95D840FF", "#440154FF")) +
theme_bw())
data <- read.csv(' sao-paulo-properties.csv')
setwd("C:/Users/Renato/Dropbox/pos_usp/usp_fechado/unidade_1/6_modelos_logisticos_binarios_multinomiais")
setwd("C:/Users/Renato/Downloads")
data <- read.csv(' sao-paulo-properties.csv')
y <- 3.96 + (0.3*9.19) + (3.4*3.07)
y
formatC(y, format = "f", digits = 4)
erro_q <- (18.26 - y)^2
erro_q
y2 <- 8 + (7.07*6.45) + (4.27*8.31) + (4.83*(6.45)^2) + (-9.16*(8.31)^2)
y2
formatC(y2, format = "f", digits = 4)
erro_q2 <- (-340.35 - y2)^2
erro_q2
setwd('C:\Users\Renato\Desktop\R')
data <- read.csv('sao-paulo-properties.csv')
getwd()
setwd('C:\Users\Renato\Desktop\R')
data <- read.csv('sao-paulo-properties.csv')
setwd("C:/Users/Renato/Desktop/R")
data <- read.csv('sao-paulo-properties.csv')
data_rent <- filter(data, Negotiation.Type == 'rent')
data <- read.csv('sao-paulo-properties.csv')
View(data)
data_rent <- filter(data, Negotiation.Type == 'rent')
data
data_rent <- filter(data, Negotiation.Type == 'rent')
data_rent <- filter(data, Negotiation.Type == 'rent')
data_rent <- filter(data, Negotiation.Type = "rent")
Negotiation.Type = "rent"
data, Negotiation.Type = "rent"
modelo <- lm(formula = Price ~ Condo + Size + Rooms + Toilets + Suites + Parking + Furnished,
data = data_rent)
data_rent <- filter(data, Negotiation.Type = "rent")
data <- read.csv('data.csv')
data_rent <- filter(data, Negotiation.Type = "rent")
data_rent <- filter(data, Negotiation.Type == "rent")
modelo <- lm(formula = Price ~ Condo + Size + Rooms + Toilets + Suites + Parking + Furnished,
data = data_rent)
View(data)
modelo <- lm(formula = Price ~ Condo + Size + Rooms + Toilets + Suites + Parking + Furnished,
data = data_rent)
summary(modelo)
data_rent
modelo <- lm(formula = Price ~ Condo + Size + Rooms + Toilets + Suites + Parking + Furnished,
data = data_rent)
modelo <- lm(formula = Price ~ Condo + Size + Rooms + Toilets + Suites + Parking + Furnished,
data = data_rent)
modelo <- lm(formula = Price ~ Condo + Size + Rooms + Toilets + Suites + Parking + Furnished,
data = data_rent)
